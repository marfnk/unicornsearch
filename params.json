{
  "name": "Unicornsearch",
  "tagline": "A Bootstrap 3 and AngularJS multi-search component with focus on usability, minimal code and configurability.",
  "body": "# Unicornsearch\r\nso pure but still WIP\r\n\r\n[Example on Plunker](https://plnkr.co/edit/8SlSxsnbFx6QMxRvbzJY?p=preview)\r\n\r\n## Description\r\nThis is yet another AngularJS select2-style component. But it is minimal and super clean, focusses on usability and only depends on Angular.\r\nIt has only ca. 0,5% LOC of select2.\r\n\r\n## Features\r\n- keyboard support (tab, backspace, arrow keys, enter, ESC)\r\n- uses `ng-model` like a common input element\r\n- validates the ng-model and sets the `$touched` attribute\r\n- you inject your own search result loading method\r\n- optional \"clear\"-btn\r\n- disabled state just like in common input elements\r\n- configurable (minium chars for search, typing delay, maximum entries)\r\n- still focusable when maximum elements selected\r\n- last but not least: beautiful like a unicorn ðŸ¦„\r\nÂ \r\n## Setup\r\n\r\n### load dependency\r\n#### using bower\r\n    \r\n    'unicornsearch': 'https://github.com/marfnk/unicornsearch.git'\r\n\r\n#### manually\r\n\t<script type=\"text/javascript\" src=\"path/to/unicornsearch/dist/unicornsearch.min.js\"></script>\r\n\t<link rel=\"stylesheet\" href=\"path/to/unicornsearch/dist/unicornsearch.css\" />\r\n\r\n### Inject AngularJS dependency\r\n\r\n\tangular\r\n\t\t.module('myExampleApp',\r\n\t\t\t['unicornsearchModule'], //inject unicornsearch module\r\n\t\t\t... //more dependencies\r\n\t\t);\r\n\r\n\r\n## Usage\r\n\r\n### HTML\r\n    <form name=\"yourForm\">\r\n\r\n    \t<unicorn-search\r\n          ng-model=\"model\"\r\n          name=\"q_id_foo\"\r\n          load=\"load\"\r\n          item-to-key=\"itemToKey\"\r\n          item-to-string=\"itemToString\"\r\n          config=\"config\"\r\n          translations=\"translations\"\r\n          required\r\n          ng-disabled=\"disabled\"></unicorn-search>\r\n    </form>\r\n\r\n### JS (configuration)\r\n\r\n    //preselected items\r\n    $scope.model = [\r\n      {id: 42, label: 'unicorn'}\r\n    ];\r\n\r\n    //unicornsearch config\r\n    $scope.config = {\r\n      minChars: 4,\t\t\t//mininum characters before search is triggered\r\n      delay: 300,\t\t\t//duration in ms between the 'keyup' event and the search\r\n      maxItems: 5,\t\t\t//maximum number of selected items\r\n      showClearBtn: false,\t//whether the appended clear button should be shown\r\n      clearOnAdd: false\t\t//whether the search input and results should be cleared when a search result is added\r\n    }\r\n\r\n    //i18n\r\n    $scope.translations = {\r\n      maximumReached: 'maximale Anzahl erreicht',\r\n      nothingFound: 'Nichts gefunden',\r\n      tooLessChars: 'Suchanfrage zu kurz',\r\n      errorFetchingResults: 'Konnte Ergebnisse nicht laden.',\r\n      resultSingular: 'Ergebnis',\r\n      resultPlural: 'Ergebnisse',\r\n      alreadySelected: '(bereits ausgewÃ¤hlt)'\r\n    }\r\n\r\n    //comparable property of an item (e.g. item.id), compares by id if undefined\r\n    $scope.itemToKey = function(item) {\r\n      return item.id + item.label;\r\n    }\r\n\r\n    //function that transforms an item into a string for the chips, uses item.label if undefined\r\n    $scope.itemToString = function(item) {\r\n      return item.label + \" :) \";\r\n    }\r\n\r\n    //loading the results - has to return a $q (promise)\r\n    $scope.load = function(searchTerm) {\r\n    \t return $q(function(resolve, reject) {\r\n    \t    var results = loadYourResultsFromSomewhere(searchTerm);\r\n    \t    resolve(results);\r\n    \t    //or if error: reject(errorMsg);\r\n    \t }\r\n    }\r\n\r\n### SASS (styling)\r\n\r\n    //set your bootstrap variables\r\n    @import \"path/to/your/bootstrap-sass-official\";\r\n    @import \"path/to/unicornsearch/src/unicornsearch.scss\";",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}